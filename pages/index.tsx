import Button from "$components/Button";
import { useAppContext } from "$components/context/Context";
import Input from "$components/Input";
import Select from "$components/Select";
import Tarjetac from "$components/Tarjeta";
import { currencyFormatter } from "$lib/formatters";
import { Tarjeta } from "@prisma/client";
import axios from "axios";
import type { NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { ChangeEvent, useEffect, useState } from "react";

const Home: NextPage = () => {
  const [newTarjeta, setNewTarjeta] = useState<any>();
  const { token, colores } = useAppContext();
  const [isLoading, setIsLoading] = useState(false);
  const [tarjetas, setTarjetas] = useState<Tarjeta[]>([]);
  const [showAgregarTarjeta, setShowAgregarTarjeta] = useState(false);
  const [balanceTotal, setBalanceTotal] = useState(0);

  useEffect(() => {
    axios.get("/api/tarjeta").then((res) => {
      setTarjetas(res.data);
    });
  }, []);

  useEffect(() => {
    if (tarjetas.length === 0) {
      setShowAgregarTarjeta(true);
    } else {
      setShowAgregarTarjeta(false);
    }
  }, [tarjetas]);

  const submitHandler = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    let tarjeta = newTarjeta;
    tarjeta.usuarioId = token;
    tarjeta.color = colores[Math.floor(Math.random() * colores.length)];
    if (newTarjeta.tipo === "debito") {
      delete tarjeta["credito"];
    } else {
      delete tarjeta["debito"];
    }

    setNewTarjeta(tarjeta);

    setIsLoading(true);
    setTimeout(() => {
      axios
        .post("/api/tarjeta", tarjeta)
        .then((res) => {
          setTarjetas([...tarjetas, res.data]);
          process.env.NODE_ENV !== "production" &&
            localStorage.setItem("idTarjeta", res.data.id);
        })
        .catch((err) => {
          console.log(err.response.data);
        })
        .finally(() => {
          setIsLoading(false);
        });
    }, 500);
  };

  if (!token) return <div>No token</div>;

  return (
    <div className="space-y-8 p-8 text-center">
      <Head>
        <title>Tu dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <p className="text-center">Tus tarjetas</p>
      <div
        className="mx-auto flex items-stretch justify-center space-x-8 overflow-x-auto"
        id="tarjetas"
      >
        {tarjetas.map((tarjeta) => (
          <Link href={`/tarjeta/${tarjeta.id}`} key={tarjeta.id}>
            <a>
              <Tarjetac
                key={tarjeta.id}
                nombre={tarjeta.nombre}
                saldo={tarjeta.saldo}
                tipo={tarjeta.tipo}
                fechaDeCorte={tarjeta.fechaDeCorte}
                color={tarjeta.color}
                id={tarjeta.id}
              />
            </a>
          </Link>
        ))}
      </div>
      {showAgregarTarjeta ? (
        <div className="fixed z-10 h-full w-full bg-slate-200 bg-opacity-50">
          <div
            className="fixed inset-0 mx-auto my-auto  h-min w-5/6 overflow-y-auto rounded-lg bg-white drop-shadow-xl"
            id="my-modal"
          >
            <div className="relative mx-auto flex w-full flex-wrap items-center justify-center p-16 lg:p-24">
              <i
                className="bi bi-x-square-fill absolute top-4 left-4 cursor-pointer text-red-300 transition-all hover:text-red-500"
                onClick={() => setShowAgregarTarjeta(false)}
              ></i>
              <div className="container m-auto mx-auto flex flex-col items-center space-y-8 border-2 border-decorator py-8">
                <h1 className="text-2xl text-dark lg:text-3xl">
                  Agrega una nueva tarjeta
                </h1>

                <form
                  className="flex flex-col space-y-4 lg:w-1/2"
                  onSubmit={submitHandler}
                >
                  <div className="grid grid-cols-2 gap-4">
                    <Select
                      id="tipo"
                      options={[
                        { value: "credito", label: "Crédito" },
                        { value: "debito", label: "Débito" },
                        {
                          value: "Selecciona el tipo de tarjeta",
                          label: "Selecciona el tipo de tarjeta",
                          default: true,
                        },
                      ]}
                      onChange={(e: ChangeEvent<HTMLSelectElement>) => {
                        setNewTarjeta({ ...newTarjeta, tipo: e.target.value });
                      }}
                    />

                    <Input
                      id="nombre"
                      placeholder="Nombre"
                      onChange={(e: ChangeEvent<HTMLInputElement>) => {
                        setNewTarjeta({
                          ...newTarjeta,
                          nombre: e.target.value,
                        });
                      }}
                    />
                  </div>

                  <div
                    className={`grid ${
                      newTarjeta?.tipo === "credito"
                        ? "grid-cols-2 gap-4"
                        : "grid-cols-1"
                    }`}
                  >
                    {newTarjeta?.tipo === "credito" && (
                      <Input
                        id="limiteDeCredito"
                        placeholder="Límite de crédito"
                        onChange={(e: ChangeEvent<HTMLInputElement>) => {
                          setNewTarjeta({
                            ...newTarjeta,
                            credito: {
                              ...newTarjeta.credito,
                              limiteDeCredito: parseFloat(e.target.value),
                            },
                          });
                        }}
                      />
                    )}
                    <Input
                      id="saldo"
                      placeholder="Saldo"
                      onChange={(e: ChangeEvent<HTMLInputElement>) => {
                        setNewTarjeta({
                          ...newTarjeta,
                          saldo: parseFloat(e.target.value),
                        });
                      }}
                    />
                  </div>

                  {newTarjeta?.tipo === "credito" && (
                    <div className="grid grid-cols-2 gap-4">
                      <Input
                        id="tasaDeInteres"
                        placeholder="Tasa de interés"
                        onChange={(e: ChangeEvent<HTMLInputElement>) => {
                          setNewTarjeta({
                            ...newTarjeta,
                            credito: {
                              ...newTarjeta.credito,
                              tasaDeInteres: parseFloat(e.target.value),
                            },
                          });
                        }}
                      />
                      <Input
                        id="anualidad"
                        placeholder="Anualidad"
                        onChange={(e: ChangeEvent<HTMLInputElement>) => {
                          setNewTarjeta({
                            ...newTarjeta,
                            credito: {
                              ...newTarjeta.credito,
                              anualidad: parseFloat(e.target.value),
                            },
                          });
                        }}
                      />
                    </div>
                  )}

                  <Input
                    id="fechaDeCorte"
                    placeholder="Día de Corte"
                    onChange={(e: ChangeEvent<HTMLInputElement>) => {
                      setNewTarjeta({
                        ...newTarjeta,
                        fechaDeCorte: e.target.value,
                      });
                    }}
                  />
                  <Button id="agregar-tarjeta" type="submit" primary>
                    {isLoading ? (
                      <i className="bi bi-three-dots animate-pulse text-lg"></i>
                    ) : (
                      "Agregar tarjeta"
                    )}
                  </Button>
                </form>
              </div>
            </div>
          </div>
        </div>
      ) : (
        tarjetas.length === 0 && (
          <h1>
            Aún no tienes ninguna tarjeta... puedes agregarla haciendo click en
            el botón de abajo.
          </h1>
        )
      )}
      <div className="w-auto">
        <Button
          id="agregar-nueva-tarjeta"
          onClick={() => setShowAgregarTarjeta(true)}
          type="button"
        >
          Agregar una nueva tarjeta
        </Button>
      </div>
      <h2 className="text-xl">
        Balance total:{" "}
        {currencyFormatter.format(
          tarjetas.reduce((acc, tarjeta) => acc + tarjeta.saldo, 0)
        )}
      </h2>
    </div>
  );
};

export default Home;
